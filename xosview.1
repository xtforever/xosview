.TH "XOSVIEW" 1
.UC
.SH NAME
xosview \- X based system monitor
.SH SYNOPSIS
xosview [options]
.\"  ================  Macros  =============================
.\"  First, let's define some handy roff macros.
.\"  A macro begins with .de <xx> where one will invoke this macro with .xx
.\"  The macro definition ends with the .. line.
.\"  I don't know what macro abbreviations are free, so I just chose a few,
.\"  and haven't noticed a problem so far!  bgrayson

.\"  There are several paragraphs that are repeated in the resource section.
.\"  Rather than typing the whole stuff out each time, we define a few macros.

.\"  The .pp macro takes a single argument (net, disk, etc), and
.\" prints a paragraph description of a Priority resource.  Only the
.\" header (xosview*diskPriority: \fIpriority\fP) needs to be specified in
.\" addition to the .pp macro.
.\"  Usage:   .pp load
.de pp
xosview*\\$1Priority: \fIpriority\fP
.RS
This number (which must be an integer >= 1) sets the number of tenths of
a second that the \\$1 meter waits between updates.  A value of 1 has xosview
update the meter 10 times per second (the fastest).  A value of 600 would
cause xosview to update the meter once a minute.
.RE
..
.\"  The .dc macro is similar to the .pp macro, except that it is for
.\" the decay resource paragraphs.
.\"  Usage:  .dc net
.de dc
xosview*\\$1Decay: (True or False)
.RS
If True then the \\$1 meter will be split vertically in two.  The top
half will show the instantaneous state, while the bottom half will
display a decaying average of the state.
.RE
..
.\" The .dg macro is similar to the .dc macro, except that it is for
.\" the scrolling graph resource paragraphs.
.\" Usage:  .dg net
.de dg
xosview*\\$1Graph: (True or False)
.RS
If this is set to True then the \\$1 meter will be drawn as a horizontally
scrolling bargraph showing the state value verses time.
.RE
..
.\"  The .pm macro is for ``plus/minus'' -- for the
.\"  enable/disable command-line options.
.de pm
-\\$1
.RS
This option overrides the xosview*\\$1 resource.  It is
equivalent to setting xosview*\\$1 to "False".
.RE

+\\$1
.RS
This option overrides the xosview*\\$1 resource.  It is
equivalent to setting xosview*\\$1 to "True".
.RE
..
.\"  The .xt macro is for ``Xresource true'' -- for enabling a
.\"  meter, like the .pm macro/-+foo.
.de xt
xosview*\\$1: (True or False)
.RS
If True then xosview will display a \\$1 meter.
.RE
..
.\"  The .uf macro is for the ``used format'' stuff.
.de uf
xosview*\\$1UsedFormat: (float, percent or autoscale)
.RS
This resource tells xosview how to display "used" labels.  The formats work
as follows:

\fBfloat\fP:
.RS
Display the value as a floating point number.
.RE
\fBpercent\fP:
.RS
Display the value as a percentage of the total.
.RE
\fBautoscale\fP:
.RS
Display the absolute value and automatically print the units (K, M, or G) as
appropriate.
.RE
.RE
..
.\"  Define a color macro for the various xosview*fooXXXColor: resources.
.\"  Usage:  .cc swap Used used "swap space"  <--  keep 'swap
\"                                                       space' as one arg.
.de cc
xosview*\\$1\\$2Color: \fIcolor\fP
.RS
The \\$1 meter will use this color to display the \\$3 field.
.RE
..
.\"  ================  End of Macros  =============================
.SH DESCRIPTION
\fIxosview\fP is a monitor which displays the status of several system
parameters.  These include CPU usage, load average, memory, swap
space, network usage and more.  Each resource is displayed as a
horizontal bar which is separated into color coded regions showing how
much of the resource is being put to a particular use.

\fIxosview\fP runs on several platforms (Linux, NetBSD, FreeBSD,
OpenBSD, DragonflyBSD, some Solaris systems, IRIX 6.5, HPUX and GNU).
Not all of the meters described below are supported on all platforms.
Some of the meters may appear different depending upon the platform
\fIxosview\fP is running on.  Note that *BSD is used as an
abbreviation for all the supported BSD operating systems (NetBSD,
FreeBSD, OpenBSD, DragonflyBSD).

\fBLoad\fP: Kernel reported load average
   all platforms  :  load
   Linux          :  load | CPU frequency
   *BSD           :  load | CPU frequency
   SunOS5         :  load | CPU frequency

\fBCPU Usage\fP
   Linux  : user | nice | system | soft-interrupt | interrupt | io-wait |
            guest | niced guest | stolen | idle
   *BSD   : user | nice | system | interrupt | idle
   SunOS5 : user | system | wait | idle
   IRIX   : user | system | interrupt | wait | idle
   HPUX   : user | nice | system | interrupt | idle

\fBMemory Usage\fP
   Linux  : used | buffers | slab | map | cache | free
   FreeBSD: active | inactive | wired | cache | free
   DFBSD  : active | inactive | wired | cache | free
   OpenBSD: active | inactive | wired | free
   NetBSD : active | inactive | wired | free
   SunOS5 : kernel | zfs | other | free
   IRIX   : kernel | fs | user | free
   HPUX   : text | used | other | free
   GNU    : active | inactive | wired | free

\fBSwap Usage\fP
   Linux  : used | free
   *BSD   : used | free
   SunOS5 : used | free
   HPUX   : used | free
   GNU    : used | free

\fBDisk Usage\fP: Throughput to/from local disk, per second
   Linux  : in | out | idle
   *BSD   : in | out | idle
   SunOS5 : in | out | idle

\fBPage Swapping\fP: Pages to/from swap, per second
   Linux  : in | out | idle
   *BSD   : in | out | idle
   SunOS5 : in | out | idle
   HPUX   : in | out | idle
   GNU    : in | out | idle

\fBNetwork Usage\fP
   Linux  : in | out | idle
   *BSD   : in | out | idle
   SunOS5 : in | out | idle

\fBGFX Usage\fP: Framebuffer exchanges, per second
   IRIX   : swapbuffers

\fBInterrupts\fP: "leds" which blink when an interrupt occurs
   Linux  : IRQs
   *BSD   : IRQs

\fBInterrupt Rate\fP: Per second
   Linux  : interrupts | free
   *BSD   : interrupts | free
   SunOS5 : interrupts | free

\fBSerial Port Status\fP: "leds" which show the serial port parameters
   Linux  : LSR and MSR

\fBBattery Level\fP: charge and status of batteries
   Linux  : available | used
   *BSD   : available | used

\fBRAID\fP: State of disks in a software RAID array
   Linux  : disk0 disk1 disk2 ... diskN | rebuild

\fBWireless Link\fP
   Linux  : quality

\fBSensors\fP: Readings from sensors
   Linux  : I2C/hwmon sensors (lmstemp)
            Intel Core/AMD K8+/VIA C7 temperature (coretemp)
            ACPI thermal zones (acpitemp)
   *BSD   : I2C sensors (bsdsensor)
            Intel Core/AMD K8+ temperature (coretemp)

Typing a 'q' in the window will terminate xosview.

.SH OPTIONS

Most of these command line options are just a convenient way to set one or
more of \fIxosview\fP's resources.  Please see the \fBRESOURCES\fP section for
more details on what the resource is for.

\-v
.RS
Displays the version number.
.RE

\-name \fIname\fP
.RS
Sets the Resource name xosview will use (same as the \-name option
for typical X applications like xterm).  When performing resource
lookups, xosview will look under \fIname\fP, and then under
``xosview''.  For an example, perform the following (as
documented in README.netbsd):
.RS
  xrdb \-merge Xdefaults.stipple
  xosview \-name xosvstipple &
  xosview \-name xosvstipplebw &
.RE
.RE

\-display \fIdisplay\fP
.RS
Sets the X display to \fIdisplay\fP.  This option overrides the
xosview*display resource.
.RE

\-font \fIfont\fP
.RS
Specifies the font xosview will use for labels.  This option overrides the
xosview*font resource.
.RE

\-title \fItitle\fP
.RS
This option sets the name xosview will tell the window manager to use for
the X window and icon.  This option overrides the xosview*title resource.
.RE

\-geometry \fIgeometry_string\fP
.RS
Sets the X geometry to \fIgeometry_string\fP.  This option overrides the
xosview*geometry resource.
.RE

.pm captions
.pm labels
.pm usedlabels
.pm cpu

\-cpus
.RS
Force the display of a single meter for all CPUs in the system. This
option is equivalent to setting xosview*cpuFormat to "single".
.RE

\+cpus
.RS
Force the display of all CPUs in the system. This option is equivalent
to setting xosview*cpuFormat to "all".
.RE

.pm load
.pm mem
.pm swap
.pm battery
.pm gfx
.pm wireless
.pm net

\-network \fImaxbandwidth\fP
.RE
\-networkBW \fImaxbandwidth\fP
.RE
\-networkBandwidth \fImaxbandwidth\fP
.RS
These options override the xosview*netBandwidth resource.  They cause
xosview to display a meter that will shows network usage, with a maximum
bandwidth of \fBmaxbandwidth\fP.  Notice that setting the bandwidth to
0 no longer disables the meter \-\- use the ``\-net'' option instead.
.RE

.pm page

\-pagespeed \fIval\fP
.RS
This option overrides the xosview*pageBandWidth resource.  The resource
xosview*pageBandWidth will be set to \fIval\fP.
.RE

.pm disk
.pm int

\-ints +ints
.RE
\-interrupts +interrupts
.RS
Equivalent to \-int and +int.
.RE

.pm irqrate

\-intrate +intrate
.RS
Equivalent to \-irqrate and +irqrate.
.RE

.pm lmstemp
.pm coretemp
.pm acpitemp
.pm bsdsensor
.RE

\-xrm \fIresource_string\fP
.RS
This switch allows any of xosview's resources to be set on the command line.
An example of how the xosview*memFreeColor could be set using this option is
shown below (Note the use of " to prevent the shell from expanding
\'*\' or from creating two separate arguments, \'xosview*memfreeColor:\'
and \'purple\'):
.RS
\-xrm "xosview*memFreeColor: purple"
.RE
.RE

.SH X RESOURCES

The following is a list of X resources supported by \fIxosview\fP.  Each has
a default value assigned to it.  These values can be found in the file
Xdefaults which can be obtained in the source distribution of xosview.
They can be overridden in the usual places (/usr/lib/X11/app-defaults/XOsview,
$HOME/.Xdefaults, etc.).

It should be noted that it is OK to have a resource defined for a port of
xosview that does not support the feature the resource configures.  Xosview
will simply ignore the resources that are set for it but not supported on
a given platform.


\fBGeneral Resources\fP

xosview*title: \fIname\fP
.RS
The string that xosview will use for the X window title.  Normally xosview
will use 'xosview@machine_name' for a title.  This resource overrides the
default behavior.
.RE

xosview*geometry: \fIgeometry_string\fP
.RS
This is a standard X geometry string that defines the size and location of
the X window used by xosview.
.RE

xosview*display: \fIname\fP
.RS
The name of the display where xosview will contact the X server for drawing
its window.
.RE

xosview*pixmapName: \fIname\fP
.RS
The filename of an X pixmap (xpm) file for use as a background
image.
.RE

xosview*captions: (True or False)
.RS
If True then xosview will display meter captions.
.RE

xosview*labels: (True or False)
.RS
If True then xosview will display meter labels.
.RE

xosview*meterLabelColor: \fIcolor\fP
.RS
The color to use for the meter labels.
.RE

xosview*usedlabels: (True or False)
.RS
If True then xosview will display labels that show the percentage of the
resource (or absolute amount, depending on the meter) being used.  This
option requires that the labels option also be set to True.
.RE

xosview*usedLabelColor: \fIcolor\fP
.RS
The color to use for "used" labels.
.RE

xosview*borderwidth: \fIwidth\fP
.RS
The width of the border for the xosview window.
.RE

xosview*font: \fIfont\fP
.RS
This is the font that xosview will use.
.RE

xosview*background: \fIcolor\fP
.RS
This is the color that will be used for the background.
.RE

xosview*foreground: \fIcolor\fP
.RS
This is the color that will be used for the foreground.
.RE

xosview*enableStipple: (True or False)
.RS
Change to true to try stipple support.  This is primarily for users
stuck with 1-bit monitors/display cards.  Try setting enableStipple
true.  Please give us feedback on this, if you use it.  It needs
some more work, but no one has given us any feedback so far.
.RE

xosview*graphNumCols: \fInumber\fP
.RS
This defines the number of sample bars drawn when a meter is in scrolling
graph mode. This also has the side-effect of defining the width of the
graph columns. This is only used by meters which have graph mode enabled.
.RE


\fBLoad Meter Resources\fP

.\"  Do the load: True resource.
.xt load

xosview*loadProcColor: \fIcolor\fP
.RS
This is the color that the load meter will use to display the load average
when it is below the warning threshold.
.RE

xosview*loadWarnColor: \fIcolor\fP
.RS
This is the color that the load meter will use once the load average is
above the warning but below the critical load threshold.
.RE

xosview*loadCritColor: \fIcolor\fP
.RS
This is the color that the load meter will use once the load average is
above critical load threshold.
.RE

.\"  loadIdleColor
.cc load Idle idle

.\"  Do the priority resource
.pp load

xosview*loadWarnThreshold: \fIint\fP
.RS
This number (which must be an integer >= 1) sets the value at which
the loadmeter changes its status and color from "normal" to "warning".
The default value is the number of processors.
.RE

xosview*loadCritThreshold: \fIint\fP
.RS
This number (which must be an integer >= 1) sets the value at which
the loadmeter changes its status and color from "warning" to "critical".
The default value is four times the warning threshold.
.RE

xosview*loadDecay: (True or False)
.RS
You should probably leave this at the default value (False).  The load
is already a time-averaged value!
.RE

.dg load

.\"  loadUsedFormat resource
.uf load

xosview*loadCpuSpeed: (True or False)
.RS
Display the current CPU speed in the load meter.
.RE


\fBCPU Meter Resources\fP

xosview*cpu: (True or False)
.RS
If True then xosview will display a cpu meter. On Linux, *BSD, Solaris and
IRIX SMP machines, the resource cpuFormat defines how meters are created for
multiple CPUs.
.RE

.\"  cpuUserColor, cpuNiceColor, cpuSystemColor, cpuInterruptColor, cpuFreeColor
.cc cpu User "cpu user time"

.cc cpu Nice "cpu nice time"

.cc cpu System "cpu system time"

.cc cpu Interrupt "cpu hard interrupt time"

.cc cpu SInterrupt "cpu soft interrupt time"

.cc cpu Wait "cpu IO waiting time"

.cc cpu Guest "cpu virtualization guest time"

.cc cpu NiceGuest "cpu niced virtualization guest time"

.cc cpu Stolen "cpu involuntary wait time"

.cc cpu Free "cpu idle time"

.\"  Priority, decay, usedFormat resources:
.pp cpu

.dc cpu

.dg cpu

.uf cpu

xosview*cpuFormat: (single, all, both or auto)
.RS
If `single', only a cumulative meter for all CPU usage is created.
`all' creates a meter for each CPU, but no cumulative meter. `both'
creates one cumulative meter and one for each CPU. `auto' makes a
choice based on the number of CPUs found.
.RE

xosview*cpuFields: USED/USR/NIC/SYS/INT/SI/HI/WIO/GST/NGS/STL/IDLE
.RS
The set of fields to show in Linux CPU meter instead of the
default. Possible fields are:

\fBUSED\fP:
.RS
Combine all used CPU time into one field. This is the sum of user, nice,
system, soft and hard interrupts, guest, niced guest and stolen times.
None of these, except stolen, may be defined together with `USED'.
.RE
\fBIDLE\fP:
.RS
Time spent doing nothing. Includes I/O wait if it is not defined separately.
.RE
\fBUSR\fP:
.RS
Time spent in user mode processes. Includes nice, guest and niced guest if
those are not defined separately.
.RE
\fBNIC\fP:
.RS
Time spent in niced user mode processes. Includes niced guest if neither it
nor guest is not defined separately.
.RE
\fBSYS\fP:
.RS
Time spent in kernel code. Includes soft and hard interrupt as well as stolen
time if those are not defined separately.
.RE
\fBINT\fP:
.RS
Combines soft and hard interrupt handling times into one field.
.RE
\fBSI\fP:
.RS
Time the kernel used to handle soft interrupts. Available on Linux kernel
2.6.0 and higher.
.RE
\fBHI\fP:
.RS
Time the kernel used to handle hard interrupts. Available on Linux kernel
2.6.0 and higher.
.RE
\fBWIO\fP:
.RS
Time spent waiting for I/O to complete. Available on Linux kernel
2.6.0 and higher.
.RE
\fBGST\fP:
.RS
Time spent running guest OS in virtual machine. Includes niced guest if
it is not defined separately. Available on Linux kernel 2.6.24 and higher.
.RE
\fBNGS\fP:
.RS
Time spent running niced guest OS in virtual machine. Available on Linux kernel
2.6.32 and higher.
.RE
\fBSTL\fP:
.RS
Involuntary wait time when running as guest in virtual machine. Available
on Linux kernel 2.6.11 and higher.
.RE

Most combinations are possible (see above for restrictions), but at least
`USED' or `USR' and `SYS' need to be defined. `IDLE' field is added
automatically.
.RE


\fBMemory Meter Resources\fP

.\"  Do the mem: True resource.
.xt mem

.\"  mem{Used,Share,Buffer,...}Color resources
.cc mem Used "used memory"

.cc mem Shared "shared memory"

.cc mem Buffer "buffer memory"

.cc mem Cache "cache memory"

.cc mem Free "free memory"

.cc mem Kernel "kernel memory"

.cc mem Shared "shared memory"

.cc mem Text "HP text memory"

.cc mem Other "HP ``other'' memory"

.cc mem Active "*BSD active memory"

.cc mem Inactive "*BSD inactive memory"

.cc mem Wired "*BSD wired memory"

.cc mem Slab "Linux in-kernel data structures"

.cc mem Map "Linux memory mapped files"

.\"  Priority, decay, usedFormat resources:
.pp mem

.dc mem

.dg mem

.uf mem


\fBSwap Meter Resources\fP

.\"  Do the swap: True resource.
.xt swap

.\"  swap{Used,Free}Color resources.
.cc swap Used "used swap"

.cc swap Free "free swap"

.\"  Priority, decay, usedFormat resources:
.pp swap

.dc swap

.dg swap

.uf swap


\fBPage Swapping Meter Resources\fP

.\"  Do the page: True resource.
.xt page

xosview*pageBandWidth: \fImaxEvents\fP
.RS
This number is used to specify the expected maximum bandwidth (in events /
sec) for the page meter.  When the expected maximum bandwidth
(\fImaxEvents\fP) is exceeded then the page meter will display the relative
percentage of page swapping (25% in, 75% out).
.RE

.\"  page{In,Out,Idle}Color:
.cc page In page-in

.cc page Out page-out

.cc page Idle idle

.\"  Priority, decay, usedFormat resources:
.pp page

.dc page

.dg page

.uf page


\fBGfx Meter Resources\fP

xosview*gfx:	(True or False)
.RS
If True xosview will display the GfxMeter. The value is sampled once per
second, due to the usage of sadc to sample data.
.RE

xosview*gfxWarnColor: \fIcolor\fP
.RS
This is the color that the gfx meter will use once the warn state is
reached.
.RE

xosview*gfxAlarmColor: \fIcolor\fP
.RS
This is the color that the gfx meter will use once the alarm state is
reached.
.RE

xosview*gfxSwapColor: \fIcolor\fP
.RS
This is the color that the gfx meter will use in normal state
.RE

.\"  gfxIdleColor
.cc gfx Idle idle

.\"  Do the priority resource
.pp gfx

xosview*gfxWarnThreshold: \fIint\fP
.RS
This number (which must be an integer >= 1) of swapbuffers per second
and pipe at which the gfxmeter changes its status and color from
"normal" to "warn". The default value is 60.
.RE

xosview*gfxAlarmThreshold: \fIint\fP
.RS
This number (which must be an integer >= gfxWarnThreshold) of
swapbuffers per second and pipe at which the gfxmeter changes its status
and color from "warn" to "alarm". The default value is 120.
.RE

xosview*gfxDecay: (True or False)
.RS
You should probably leave this at the default value (False).  The gfx
does not work in decay mode.
.RE

.dg gfx

.\"  gfxUsedFormat resource
.uf gfx


\fBNetwork Meter Resources\fP

xosview*net: (True or False)
.RS
If True xosview will display the NetMeter.  Linux users will have to configure
their kernels and setup some ip accounting rules to make this work.  See the
file README.linux which comes with the xosview distribution for details.
.RE

xosview*netBandwidth: \fImaxBytes\fP
.RS
This number is used to specify the expected maximum bandwidth
(in bytes / sec) for the meter.  When the expected maximum bandwidth
(\fImaxBytes\fP) is exceeded then the network meter will display the
relative percentage of network usage (25% incoming, 75% outgoing).
.RE

xosview*netIface: \fIinterface\fP
.RS
If False, xosview will display the data received/transmitted by any of
the network interfaces. Otherwise, xosview will only display the data
received/transmitted by the specified network interface. If the name is
prepended with '-' sign, the data in that interface is ignored.
.RE

.\"  net{In,Out}Color:
.cc net In incoming

.cc net Out outgoing
.\"  FIXME XXX  Change the netBackground resource to be netIdleColor.

xosview*netBackground: \fIcolor\fP
.RS
This is the color that the network meter will use for the "idle" field.
.RE

.\"  Priority, decay, usedFormat resources:
.pp net

.dc net

.dg net

.uf net


\fBNFSStats (Client) Resources\fP

xosview*NFSStats: (True or False)
.RS
If True then xosview will display a meter to monitor NFS client stats.
.RE

xosview*NFSStatReTransColor: \fIcolor\fP
.RS
The color to be used for retransmit stats.
.RE

xosview*NFSStatAuthRefrshColor:	\fIcolor\fP
.RS
The color to be used for auth refresh stats.
.RE

xosview*NFSStatCallsColor: \fIcolor\fP
.RS
The color to be used for call stats.
.RE

xosview*NFSStatIdleColor: \fIcolor\fP
.RS
The color to be used for idle stats.
.RE


\fBNFSDStats (Server) Resources\fP

xosview*NFSDStats: (True or False)
.RS
If True xosview will display a meter for NFS server/daemon stats.
.RE

xosview*NFSDStatCallsColor: \fIcolor\fP
.RS
The color to be used for call stats.
.RE

xosview*NFSDStatBadCallsColor: \fIcolor\fP
.RS
The color to be used for bad stats.
.RE

xosview*NFSDStatUDPColor: \fIcolor\fP
.RS
The color to be used for UDP stats.
.RE

xosview*NFSDStatTCPColor: \fIcolor\fP
.RS
The color to be used for TCP stats.
.RE

xosview*NFSDStatIdleColor: \fIcolor\fP
.RS
The color to be used for idle stats.
.RE


\fBSerial Meter Resources\fP

xosview*serial(0-9): (True, False, or portBase)
.RS
If True then xosview will display a serial meter for ttySx.  The
portbase will be autodetected.  Because autodetection can fail, (if
the port is locked by ppp/slip for example) you can specify the
portbase instead of "True".  If a portBase is used then xosview will use
it instead of trying to autodetect.

For this to work on Linux xosview needs to be suid root in order to have
access to the ports.  See the file README.linux which comes with the xosview
distribution for more details.
.RE

xosview*serialOnColor: \fIcolor\fP
.RS
This is the color the serial meter will use for bits that are set.
.RE

xosview*serialOffColor: \fIcolor\fP
.RS
This is the color the serial meter will use for bits that are not set.
.RE

.\"  Do the priority resource
.pp serial


\fBInterrupt Meter Resources\fP

xosview*interrupts: (True or False)
.RS
If True then xosview will display an interrupt meter.
.RE

xosview*intSeparate: (True of False)
.RS
If True then xosview will display one interrupt meter per CPU on SMP
machines. If False only one meter is displayed. Default: True.
.RE

xosview*intOnColor: \fIcolor\fP
.RS
This is the color that will be used to show "active" interrupts.
.RE

xosview*intOffColor: \fIcolor\fP
.RS
This is the color that will be used to show "inactive" interrupts.
.RE

.\"  Do the priority resource
.pp int


\fBInterrupt Rate Meter Resources\fP

xosview*irqrate: (True or False)
.RS
If True then xosview will display an interrupt rate meter.
.RE

xosview*irqrateUsedColor: \fIcolor\fP
.RS
This is the color that will be used to show the interrupt rate.
.RE

.cc irqrate Idle idle

.\"  Priority, decay, usedFormat resources:
.pp irqrate

.dc irqrate

.dg irqrate

.uf irqrate


\fBLm Sensors Resources\fP

.xt lmstemp

xosview*lmstempHighest: \fInumber\fP
.RS
Highest value displayed. If not given, or too small, the meter will adjust
to fit actual and alarm values. Can be overridden for any meter with
lmstempHighest\fIN\fP.
.RE

xosview*lmstempActColor: \fIcolor\fP
.RS
Color of actual value.
.RE

xosview*lmstempHighColor: \fIcolor\fP
.RS
Color above high alarm value, also used to indicate alarm.
.RE

xosview*lmstempLowColor: \fIcolor\fP
.RS
Color of actual value, when it is below low alarm value.
.RE

xosview*lmstempIdleColor: \fIcolor\fP
.RS
Color between actual and high alarm values.
.RE

xosview*lmstemp\fIN\fP: \fIfilename\fP
.RS
Name of input file from /proc/sys/dev/sensors/*/* or
/sys/class/hwmon/*/{,device}/, N=1,2,3,... Can also be absolute path.
For example,
.br
xosview*lmstemp1: temp1
.br
xosview*lmstemp2: temp2_input
.br

\fBNote:\fP Many sensors have the value and alarm threshold in files named
"*_input" and "*_max"/"*_min", respectively. In such case, specifying the base
name such as "temp1" here will be enough for having both files used.
.br

\fBNote:\fP If the same file name as lmstemp\fIN\fP, lmshigh\fIN\fP or
lmslow\fIN\fP exists in other sensor directories, then lmsname\fIN\fP needs to
be specified, or absolute path used, to find the correct one.
.RE

xosview*lmshigh\fIN\fP: \fIfilename\fP or \fInumber\fP
.RS
Optional high alarm value or name of file from /sys/class/hwmon/*/{,device}/,
N=1,2,3,... Can also be absolute path. If not given, lmstempHighest is used
as both maximum and high alarm. For example,
.br
xosview*lmshigh1: 70
.br
xosview*lmshigh2: temp1_crit_hyst
.RE

xosview*lmslow\fIN\fP: \fIfilename\fP or \fInumber\fP
.RS
Optional low alarm value or name of file from /sys/class/hwmon/*/{,device}/,
N=1,2,3,... Can also be absolute path. Default is 0. For example,
.br
xosview*lmslow1: 1.5
.br
xosview*lmslow2: fan1_min
.RE

xosview*lmsname\fIN\fP: \fIname\fP
.RS
Optional name of the sensor device to use when finding the filename(s) given in
lmstemp\fIN\fP, lmshigh\fIN\fP and lmslow\fIN\fP. See
/sys/class/hwmon/*/{,device}/name for the names of your sensors. This has no
effect to files given as absolute paths. For example,
.br
xosview*lmsname1: nct6779
.br
xosview*lmsname2: radeon
.RE

xosview*lmstempLabel\fIN\fP: \fIstring\fP
.RS
N-th label for above values, default is TMP.
.RE

xosview*lmstempHighest\fIN\fP: \fInumber\fP
.RS
Override default lmstempHighest for meter N.
.RE

xosview*lmstempUsedFormat\fIN\fP: (float, percent or autoscale)
.RS
Override default lmstempUsedFormat for meter N.
.RE

.pp lmstemp

.uf lmstemp


\fBACPI Temperature Resources\fP

.xt acpitemp

xosview*acpitempHighest: 100
.RS
Highest temp value displayed, default 100. If acpihigh\fIN\fP is given,
the value is read from there instead.
.RE

xosview*acpitempActColor:  \fIcolor\fP
.RS
Color of actual temperature.
.RE

xosview*acpitempHighColor:  \fIcolor\fP
.RS
Color above alarm temperature, also used to indicate alarm.
.RE

xosview*acpitempIdleColor:   \fIcolor\fP
.RS
Color between actual and alarm temperatures.
.RE

xosview*acpitemp\fIN\fP: \fIfilename\fP
.RS
Name of temperature file from /proc/acpi/thermal_zone or
/sys/devices/virtual/thermal. Note that the last directory part must be
given, e.g. TZ0/temperature. Absolute path can also be used.
.RE

xosview*acpihigh\fIN\fP:    \fIfilename\fP
.RS
Name of high value/trip point file from /proc/acpi/thermal_zone or
/sys/devices/virtual/thermal, or an absolute path to one.
.RE

xosview*acpitempLabel\fIN\fP:  \fILabelstring\fP
.RS
N-th label for above temperatures, default is TMP.
.RE

.pp acpitemp

.uf acpitemp


\fBIntel Core / AMD K8+ / VIA C7 Temperature Sensor Resources\fP

.xt coretemp

xosview*coretempHighest: 100
.RS
Highest temp value displayed, default 100. If CPU throttling temperature
(tjMax) is supplied by the operating system, it is used instead.
.RE

xosview*coretempHigh: \fInumber\fP
.RS
Value to use as alarm temperature, default is coretempHighest. If a usable
value, such as the temperature for which maximum cooling is required, is
supplied by the operating system, it is used instead.
.RE

xosview*coretempActColor:  \fIcolor\fP
.RS
Color of actual temperature.
.RE

xosview*coretempHighColor:  \fIcolor\fP
.RS
Color above alarm temperature, also used to indicate alarm.
.RE

xosview*coretempIdleColor:   \fIcolor\fP
.RS
Color between actual and alarm temperatures.
.RE

xosview*coretempDisplayType: (separate, average or maximum)
.RS
This resource tells xosview how to display the CPU temperature. The formats
work as follows:

\fBseparate\fP:
.RS
Display one meter for each CPU core of a multi-core CPU. This is the default.
.RE
\fBaverage\fP:
.RS
Display the average of core temperatures of a multi-core CPU. On multi-socket
machines, one meter per physical CPU is displayed.
.RE
\fBmaximum\fP:
.RS
Display the highest core temperature of a multi-core CPU. On multi-socket
machines, one meter per physical CPU is displayed.
.RE
.RE

.pp coretemp

.uf coretemp


\fB*BSD Sensor Resources\fP

.xt bsdsensor

xosview*bsdsensorHighest: \fInumber\fP
.RS
Highest value displayed. If not given, or too small, the meter will adjust
to fit actual and alarm values. Can be overridden for any meter with
bsdsensorHighest\fIN\fP.
.RE

xosview*bsdsensorActColor: \fIcolor\fP
.RS
Color of actual value.
.RE

xosview*bsdsensorHighColor: \fIcolor\fP
.RS
Color above high alarm value, also used to indicate alarm.
.RE

xosview*bsdsensorLowColor: \fIcolor\fP
.RS
Color of actual value, when it is below low alarm value.
.RE

xosview*bsdsensorIdleColor: \fIcolor\fP
.RS
Color between actual and high alarm values.
.RE

xosview*bsdsensor\fIN\fP:     \fIname.type\fP
.br
xosview*bsdsensorHigh\fIN\fP: \fIname.type\fP
.br
xosview*bsdsensorLow\fIN\fP:  \fIname.type\fP
.RS
These define where the actual value, high alarm value and low alarm value for
meter N=1,2,3,... will be read from. The name is the sensor driver, and type is
the wanted value. Both alarm values are optional, and can also be given as
static numerical values.
.br

You can find the correct pair for OpenBSD and DragonFly BSD with systat
command, e.g.
.br
xosview*bsdsensor1:     it0.temp1
.br
xosview*bsdsensorHigh1: 100

On NetBSD, you can find the driver name with envstat command. Value name for
the actual reading is typically 'cur-value' and for high alarm 'critical-max'
and for low alarm 'critical-min', e.g.
.br
xosview*bsdsensor2:     coretemp0.cur-value
.br
xosview*bsdsensorHigh2: coretemp0.critical-max

For all possible NetBSD value names, refer to envstat source code.

FreeBSD has no usable sensor drivers as of version 9.0. However, ACPI thermal
zones can be used by defining the sysctl node below hw.acpi.thermal, e.g.
.br
xosview*bsdsensor1:     tz0.temperature
.br
xosview*bsdsensorHigh1: tz0._CRT
.br

ACPI thermal zones can be used like this on DragonFly BSD as well.
.RE

xosview*bsdsensorLabel\fIN\fP: \fIstring\fP
.RS
N-th label for above meters, default is SEN\fIN\fP.
.RE

xosview*bsdsensorHighest\fIN\fP: \fInumber\fP
.RS
Override default bsdsensorHighest for meter N.
.RE

xosview*bsdsensorUsedFormat\fIN\fP: (float, percent or autoscale)
.RS
Override default bsdsensorUsedFormat for meter N.
.RE

.pp bsdsensor

.uf bsdsensor


\fBBattery Meter Resources\fP

xosview*battery: (True or False)
.RS
If True then xosview will display a battery meter.  Linux users will need
to have APM or ACPI support in their kernels for this to work.
For both APM and ACPI, xosview shows the status/sum of all batteries.
Additionally - the legend text gets changed/adjusted to reflect the
current state (charging/low/critical/etc.) of the battery/batteries.
.RE

xosview*batteryLeftColor: \fIcolor\fP
.RS
This is the color that will be used to show the amount of battery power left.
.RE

xosview*batteryUsedColor: \fIcolor\fP
.RS
This is the color that will be used to show the amount of battery power used.
.RE

xosview*batteryChargeColor: \fIcolor\fP
.RS
This is the color that will be used as 'left' - if the batteries get charged.
.RE

xosview*batteryFullColor: \fIcolor\fP
.RS
This is the color that will be used as 'left' - if the batteries are fully charged.
APM and ACPI does provide this info, but not all machines actually do so.
.RE

xosview*batteryLowColor: \fIcolor\fP
.RS
APM only - the 'left' color that will indicate a low battery.
Depends on the machine - e.g. below 25% remaining capacity.
.RE

xosview*batteryCritColor: \fIcolor\fP
.RS
APM case: the 'left' color if APM indicates 'critical' state. (less than 5%)
ACPI case: the 'left' color if the remaining capacity is below the alarm value.
(which can be set by the user in /proc/acpi/battery/BAT[01]/alarm )
.RE

xosview*batteryNoneColor: \fIcolor\fP
.RS
If no battery is present - or all batteries get removed (while on AC).
.RE

.\"  Do the priority resource
.pp battery

.uf battery


\fBWireless Meter Resources\fP

xosview*wireless: (True or False)
.RS
If True then xosview will display the link quality of each wireless connection.
Note that the graph will *never* show up, if you don't have any wireless
devices, or no wireless extensions in the kernel (/proc/net/wireless).
Default is true.
.RE

xosview*PoorQualityColor: \fIcolor\fP
.RS
This is the color for the quality field when between 0 and 6.
.RE

xosview*FairQualityColor: \fIcolor\fP
.RS
This is the color for the quality field when between 7 and 14.
.RE

xosview*GoodQualityColor: \fIcolor\fP
.RS
This is the color for the quality field when higher than 14.
.RE

xosview*wirelessUsedColor: \fIcolor\fP
.RS
This is the background color.
.RE

.\"  Do the priority resource
.pp wireless

.dc wireless

.uf wireless


\fBDisk Meter Resources\fP

.\"  Do the disk: True resource.
.xt disk

.\"  disk colors
.cc disk In reads

.cc disk Out writes

.cc disk Idle idle

xosview*diskBandwidth: \fIbandwidth\fP
.RS
This number is used to specify the expected maximum bandwidth in bytes
per second for the disk meter.
.RE

xosview*diskWriteColor: \fIcolor\fP
.RS
This color will be used for the linux meter to show writes.
.RE

xosview*diskReadColor: \fIcolor\fP
.RS
This color will be used for the linux meter to show reads.
.RE

.\"  Priority, decay, usedFormat resources:
.pp disk

.dc disk

.dg disk

.uf disk


\fBRAID Meter Resources\fP

.\"  Do the RAID: True resource.
.xt RAID

xosview*RAIDdevicecount: \fIint\fP
.RS
Please enter your RAID device count (n) here or 0 if you don't have any
supported RAID devices. xosview then will display n RAID state displays.
.RE

xosview*RAIDdiskOnlineColor: \fIcolor\fP

xosview*RAIDdiskFailureColor: \fIcolor\fP
.RS
These colors will be used for indicating working/online or failed/offline
disks. The order (from left to right) is the same as in /proc/mdstat.
.RE

xosview*RAIDresyncdoneColor: \fIcolor\fP

xosview*RAIDresynctodoColor: \fIcolor\fP

xosview*RAIDresynccompleteColor: \fIcolor\fP
.RS
If a resync/rebuild of the RAID array is in progress, the "done" and "todo"
colors will be used. If no rebuild/resync is running, then the "complete"
color will be shown.
.RE

.\"  RAIDpriority resource
.pp RAID

.\"  RAIDUsedFormat resource
.uf RAID

.SH OBTAINING

This version of xosview is distributed from the following site:

.RS
http://www.pogo.org.uk/~mark/xosview/
.RE

.SH AUTHORS

Mike Romberg  <mike.romberg@noaa.gov>
.RS
Original author, Linux and HPUX ports.
.RE

Brian Grayson <bgrayson@netbsd.org>
.RS
NetBSD port and most of the nice enhancements for version 1.4,
initial work on FreeBSD port.
.RE

Scott McNab <jedi@tartarus.uwa.edu.au>
.RS
Added the scrolling graph mode.
.RE

Tom Pavel <pavel@slac.stanford.edu>
.RS
Most of the FreeBSD support, more resource-handling improvements.
.RE

Greg Onufer <exodus@cheers.bungi.com>
.RS
SunOS port.
.RE

Stefan Eilemann <eilemann@gmail.com>
.RS
IRIX 6.5 port.
.RE

Sheldon Hearn <axl@iafrica.com>
.RS
FreeBSD libdevstat-based diskmeter support.
.RE

David W. Talmage <talmage@jefferson.cmf.nrl.navy.mil>
.RS
Added battery-meter support to NetBSD.
.RE

Oleg Safiullin <form@openbsd.org>
.RS
OpenBSD interrupt-meter support.
.RE

Werner Fink <werner@suse.de>
.RS
Originator of the loadmeter.
.RE

Massimiliano Ghilardi <ghilardi@cibs.sns.it>
.RS
Linux pagemeter.
.RE

Carsten Schabacker <cschaba@spock.central.de>
.RS
Made extensions to the serial-meter.
.RE

Paal Beyer <pbeyer@online.no>
.RS
Ported the linux memstat kernel module to linux-2.1
.RE

Jerome Forissier <forissier@isia.cma.fr>
.RS
Author of the Linux SMP kernel patch which xosview uses to display
meters for each CPU.
.RE

Tomer Klainer <mandor@cs.huji.ac.il>
.RS
Initial port to BSDI.
.RE

Arno Augustin <Arno.Augustin@3SOFT.de>
.RS
Solaris disk and network meters.
.RE

Alberto BARSELLA <ishark@lsh01.univ-lille1.fr>
.RS
Fixes for linux diskmeter + ip_chains support
.RE

Thomas Waldmann <ThomasWaldmann@gmx.de>
.RS
Linux raid meter, bitfieldmeter.
Many cosmetic fixes.
.RE

Leopold Toetsch <lt@toetsch.at>
.RS
Linux lms temp meter.
.RE

David O'Brien <obrien@nuxi.com>
.RS
FreeBSD 4.* updates, and a few other suggestions.
.RE

Christos Zoulas <christos@netbsd.org>
.RS
C++ standard compliance and other NetBSD fixes.
.RE

Tim Ehlers <tehlers@gwdg.de>
.RS
Wireless Link-Meter for Linux.
.RE

Mark Hills <mark@pogo.org.uk>
.RS
Bug fixes and general caretaking.
.RE

Tomi Tapper <tomi.o.tapper@student.jyu.fi>
.RS
Temperature sensor, and FreeBSD updates.
.RE

Raymond S Brand (rsbx@acm.org)
.RS
Misc fixes.
.RE

And many others who have sent in small fixes and improvements.
